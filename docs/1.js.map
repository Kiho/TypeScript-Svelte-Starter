{"version":3,"sources":["..\\./src/utils/request.ts","..\\./src/services/appService.ts","..\\./src/components/app/modal.html","..\\./src/services/appPage.ts","..\\./src/components/app/page.html"],"names":["request","Requests","makeRequest","url","method","headers","body","mode","JSON","stringify","fetch","basePath","res","_a","sent","contentType","get","indexOf","json","text","makeHeaders","Headers","append","Promise","rej","__awaiter","_this","err_1","post","err_2","put","err_3","delete","err_4","appService_AppService","AppService","getList","path","config","save","item","fnSave","id","then","title","modalSize","fire","appPage","oncreate","p","o","Object","assign","this","appService","data","set","list","add","evt","preventDefault","showModal","selectedItem","edit","form","isValid","checkValidity","i","length","input","console","log","validationMessage","setError","validateForm","refs","close","app","methods","fielddata","name","ctx","event","columndata","create_if_block","component","partial","options"],"mappings":"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","file":"1.js","sourcesContent":["declare var basePath;\r\n\r\nclass Requests {\r\n    static async makeRequest(url, method, headers, body?) {\r\n        let request: RequestInit = {\r\n            mode: 'cors',\r\n            method,\r\n            headers\r\n        };\r\n        if (body) {\r\n            request.body = JSON.stringify(body);\r\n        }\r\n        const res = await fetch(basePath + url, request);\r\n\r\n        var contentType = res.headers.get(\"content-type\");\r\n        if (contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n            return res.json();\r\n        } else {\r\n            return res.text();\r\n        }\r\n    }\r\n    static makeHeaders() {\r\n        const headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        return headers;\r\n    }\r\n    static async get(url) {\r\n        return new Promise(async (res, rej) => {\r\n            try {\r\n                const headers = Requests.makeHeaders();\r\n                const json = await Requests.makeRequest(url, 'GET', headers);\r\n                res(json);\r\n            } catch (err) {\r\n                rej(err);\r\n            }\r\n        });\r\n    }\r\n    static async post(url, body) {\r\n        return new Promise(async (res, rej) => {\r\n            try {\r\n                const headers = Requests.makeHeaders();\r\n                const json = await Requests.makeRequest(url, 'POST', headers, body);\r\n                res(json);\r\n            } catch (err) {\r\n                rej(err);\r\n            }\r\n        });\r\n    }\r\n    static async put(url, body) {\r\n        return new Promise(async (res, rej) => {\r\n            try {\r\n                const headers = Requests.makeHeaders();\r\n                const json = await Requests.makeRequest(url, 'PUT', headers, body);\r\n                res(json);\r\n            } catch (err) {\r\n                rej(err);\r\n            }\r\n        });\r\n    }\r\n    static async delete(url, body) {\r\n        return new Promise(async (res, rej) => {\r\n            try {\r\n                const headers = Requests.makeHeaders();\r\n                const json = await Requests.makeRequest(url, 'DELETE', headers, body);\r\n                res(json);\r\n            } catch (err) {\r\n                rej(err);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default Requests;","import Requests from '../utils/request';\r\nimport { apiBaseUrl } from '../config';\r\n\r\nexport default class AppService {\r\n\r\n    static async getList(path: string): Promise<{}> {\r\n        return Requests.get(`${apiBaseUrl}api/${path}`);\r\n    }\r\n\r\n    static async save(path: string, item, fnSave): Promise<{}> {\r\n        if (item.id) {\r\n            return Requests.put(`${apiBaseUrl}api/${path}`, item).then(fnSave);\r\n        } else {\r\n            return Requests.post(`${apiBaseUrl}api/${path}`, item).then(fnSave);\r\n        }        \r\n    }\r\n}","<div class='modal-background' on:click='fire(\"close\")'></div>\r\n\r\n<div class='modal-container modal-{modalSize}'>\r\n    <div class=\"modal-header\">\r\n        <h2 class=\"modal-title\">{title}</h2>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n\t\t<div>\r\n\t\t\t<slot></slot>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"modal-footer\">\r\n\t\t<button type=\"button\" class=\"btn btn-secondary pull-right\" on:click='fire(\"close\")'>Close</button>\r\n\t\t<button type=\"button\" class=\"btn btn-primary pull-right\" on:click='fire(\"save\")'>Save Changes</button>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\t.modal-footer {\r\n        padding: 10px 15px 0;\r\n    }\r\n\t.modal-footer .btn-primary {\r\n        margin-right: 10px\r\n    }\r\n    .modal-header,\r\n\t.modal-body {\r\n        padding: 15px 50px 15px 50px;\r\n    }\r\n\t.modal-background {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(0,0,0,0.3);\r\n\t}\r\n\r\n\t.modal-container {\r\n\t\tposition: absolute;\r\n\t\tleft: 50%;\r\n\t\ttop: 50%;\r\n\t\toverflow: auto;\r\n\t\ttransform: translate(-50%,-50%);\r\n\t\tpadding: 1em;\r\n        width: calc(100vw - 4em);\r\n        max-height: calc(100vh - 4em);\r\n\t\tborder-radius: 0.2em;\r\n\t\tbackground: white;\r\n\t}\r\n\r\n    .modal-small {\r\n\t\tmax-width: 32em;\r\n    }\r\n\r\n    .modal-default {\r\n\t\tmax-width: 48em;\r\n    }\r\n\r\n    .modal-large {\r\n\t\tmax-width: 64em;\r\n    }\r\n\r\n\tbutton {\r\n\t\tdisplay: block;\r\n\t}\r\n\t.invalid-feedback {\r\n        color: red;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    export default {\r\n        data: () => ({\r\n            title: '',\r\n            modalSize: 'default',\r\n\t\t}),\r\n\t};\r\n</script>","import AppService from './appService';\n\nexport default {\n    oncreate (p, o?) {\n        return Object.assign(p, this, o);   \n    },\n\n    getList(this: IAppPage) {\n        const { path } = this.get();\n        AppService.getList(path).then(data => {\n            this.set({ list: data  });\n        });\n    },\n\n    add(this: IAppPage, evt?) {\n        evt && evt.preventDefault();\n        this.set({ showModal: true, selectedItem: {} });\n    },\n\n    edit(this: IAppPage, item, evt?) {\n        evt && evt.preventDefault();\n        this.set({ showModal: true, selectedItem: item });\n    },\n\n    save(this: IAppPage, item, evt?) {\n        evt && evt.preventDefault();\n        if (!validateForm(this.refs.form.refs.form)){\n            return;\n        }\n        const fnSave = (data) => {\n            this.close();\n            this.getList();\n        }\n        const { path } = this.get();\n        AppService.save(path, item, fnSave);\n    },\n    \n    close(this: IAppPage) {\n        this.set({ showModal: false, selectedItem: null });\n    },\n}\n\nfunction validateForm(form) {\n    // check validity of all inputs\n    const isValid = form.checkValidity();\n    if (!isValid) {\n        for (let i = 0; i < form.length; i++) {\n            const input = form[i];\n            if (input.checkValidity) {\n                if (!input.checkValidity()) {\n                    console.log(input.validationMessage);                        \n                }\n                if (input.setError) {\n                    input.setError(input.validationMessage);\n                }\n            }\n        }\n    }\n    return isValid;\n}","<div class=\"container\">\r\n    <h1>{title}</h1>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <DataGrid bind:rows=\"list\" bind:columns=\"columndata\" edit={false} ></DataGrid>\r\n            <button type=\"button\" class=\"btn btn-primary\" on:click='add(event)'>Add New</button>\r\n        </div>\r\n    </div>\r\n    <div>\r\n        {#if showModal}\r\n            <Modal on:close='close()' on:save='save(selectedItem, event)' title={selectedItem.name}>\r\n                <div class=form-group>\r\n                    <FormGrid columns={fielddata} bind:item=\"selectedItem\" ref:form ></FormGrid> \r\n                </div>                     \r\n            </Modal>\r\n        {/if}\r\n    </div>\r\n</div>\r\n\r\n<script>\r\n    import { FormGrid, DataGrid } from 'svelte-formgrid';\r\n    import Modal from '../app/modal.html';\r\n    import appPage from '../../services/appPage';\r\n\r\n    const app = Object.assign({}, appPage);\r\n\r\n    export default {\r\n        components: {\r\n            Modal,\r\n            FormGrid, \r\n            DataGrid\r\n        },\r\n        oncreate () {\r\n            const { partial } = this.options;\r\n            const p = app.oncreate(this, partial);\r\n            partial.oncreate(p);          \r\n        },\r\n        methods: {\r\n            getList: app.getList,\r\n            add: app.add,\r\n            edit: app.edit,\r\n            save: app.save,\r\n            close: app.close\r\n        }\r\n    }    \r\n</script>"],"sourceRoot":""}