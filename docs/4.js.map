{"version":3,"sources":["..\\./src/components/employee/employee.ts","..\\./src/utils/request.ts","..\\./src/services/appService.ts"],"names":["fielddata","label","field","component","readOnly","row","col","required","columndata","map","x","Object","assign","actionColumn","className","push","initialData","list","showModal","selectedItem","path","title","departmentField","find","departmentColumn","employee","oncreate","p","action","edit","getList","_this","this","_services_appService__WEBPACK_IMPORTED_MODULE_0__","then","depts","set","departmentList","optionList","data","found","get","id","departmentId","name","request","Requests","makeRequest","url","method","headers","body","mode","JSON","stringify","fetch","basePath","res","_a","sent","contentType","indexOf","json","text","makeHeaders","Headers","append","Promise","rej","__awaiter","err_1","post","err_2","put","err_3","delete","err_4","appService_AppService","AppService","config","save","item","fnSave"],"mappings":"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","file":"4.js","sourcesContent":["import AppService from '../../services/appService';\n\nconst path = 'employee';\nconst title = 'Employees';\n\nexport const fielddata: IField[] = [\n{\n    label: 'ID', \n    field: 'id',\n    component: 'text',\n    readOnly: true,\n    row: 0,\n    col: 'md-6'\n}, {\n    label: 'Name',\n    field: 'name',\n    component: 'text',\n    required: true,\n    row: 1,\n    col: 'md-6'\n}, {\n    label: 'Title',\n    field: 'title',\n    component: 'text',\n    required: true,\n    row: 2,\n    col: 'md-6'\n}, {\n    label: 'Department',\n    field: 'departmentId',\n    component: 'select',\n    row: 3,\n    col: 'md-6'\n}, {\n    label: 'Rate',\n    field: 'rate',\n    component: 'currency',\n    required: true,\n    row: 4,\n    col: 'md-6'\n}];\n\nexport const columndata: IColumn[] = fielddata.map(x => Object.assign({}, x));\nexport const actionColumn: IColumn = {\n    label: 'Edit', \n    field: 'field',\n    component: 'action',\n    className: 'secondary',\n};\ncolumndata.push(actionColumn);\n\nconst initialData = {\n    list: [],\n    showModal: false,\n    selectedItem: null,\n    path, \n    title,             \n    fielddata,\n    columndata,\n};\n\nconst departmentField = fielddata.find(x => x.field == 'departmentId');\nconst departmentColumn = columndata.find(x => x.field == 'departmentId');\ndepartmentColumn.component = '';\n\nconst employee = {\n    oncreate (p) {          \n        actionColumn.action = (row) => p.edit(row);\n        p.getList();           \n    },\n    \n    getList(this: IAppPage) {\n        AppService.getList('department').then((depts: any[]) =>{\n            this.set({ departmentList: depts });\n            departmentField.optionList = depts;\n            departmentColumn.field = (data) => {\n                const { departmentList } = this.get();\n                const found = departmentList.find(x => x.id == data.departmentId);\n                return found ? found.name : '';\n            }\n            AppService.getList(path).then(data => {\n                this.set({ list: data });\n            });\n        });\n    },\n}\nexport { initialData, employee }","declare var basePath;\r\n\r\nclass Requests {\r\n    static async makeRequest(url, method, headers, body?) {\r\n        let request: RequestInit = {\r\n            mode: 'cors',\r\n            method,\r\n            headers\r\n        };\r\n        if (body) {\r\n            request.body = JSON.stringify(body);\r\n        }\r\n        const res = await fetch(basePath + url, request);\r\n\r\n        var contentType = res.headers.get(\"content-type\");\r\n        if (contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n            return res.json();\r\n        } else {\r\n            return res.text();\r\n        }\r\n    }\r\n    static makeHeaders() {\r\n        const headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        return headers;\r\n    }\r\n    static async get(url) {\r\n        return new Promise(async (res, rej) => {\r\n            try {\r\n                const headers = Requests.makeHeaders();\r\n                const json = await Requests.makeRequest(url, 'GET', headers);\r\n                res(json);\r\n            } catch (err) {\r\n                rej(err);\r\n            }\r\n        });\r\n    }\r\n    static async post(url, body) {\r\n        return new Promise(async (res, rej) => {\r\n            try {\r\n                const headers = Requests.makeHeaders();\r\n                const json = await Requests.makeRequest(url, 'POST', headers, body);\r\n                res(json);\r\n            } catch (err) {\r\n                rej(err);\r\n            }\r\n        });\r\n    }\r\n    static async put(url, body) {\r\n        return new Promise(async (res, rej) => {\r\n            try {\r\n                const headers = Requests.makeHeaders();\r\n                const json = await Requests.makeRequest(url, 'PUT', headers, body);\r\n                res(json);\r\n            } catch (err) {\r\n                rej(err);\r\n            }\r\n        });\r\n    }\r\n    static async delete(url, body) {\r\n        return new Promise(async (res, rej) => {\r\n            try {\r\n                const headers = Requests.makeHeaders();\r\n                const json = await Requests.makeRequest(url, 'DELETE', headers, body);\r\n                res(json);\r\n            } catch (err) {\r\n                rej(err);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default Requests;","import Requests from '../utils/request';\r\nimport { apiBaseUrl } from '../config';\r\n\r\nexport default class AppService {\r\n\r\n    static async getList(path: string): Promise<{}> {\r\n        return Requests.get(`${apiBaseUrl}api/${path}`);\r\n    }\r\n\r\n    static async save(path: string, item, fnSave): Promise<{}> {\r\n        if (item.id) {\r\n            return Requests.put(`${apiBaseUrl}api/${path}`, item).then(fnSave);\r\n        } else {\r\n            return Requests.post(`${apiBaseUrl}api/${path}`, item).then(fnSave);\r\n        }        \r\n    }\r\n}"],"sourceRoot":""}