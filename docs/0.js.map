{"version":3,"sources":["..\\./node_modules/svelte-formgrid/src/inputs/field-base.js","..\\./node_modules/svelte-formgrid/src/Field.html","..\\./node_modules/svelte-formgrid/src/inputs/MaskedInput.html","..\\./node_modules/svelte-formgrid/src/utils.js","..\\./node_modules/svelte-formgrid/src/inputs/CurrencyInput.html","..\\./node_modules/svelte-formgrid/src/inputs/SelectInput.html","..\\./node_modules/svelte-formgrid/src/inputs/TextInput.html","..\\./node_modules/svelte-formgrid/src/inputs/NumberInput.html","..\\./node_modules/svelte-formgrid/src/inputs/CheckboxInput.html","..\\./node_modules/svelte-formgrid/src/inputs/ActionButton.html","..\\./node_modules/svelte-formgrid/src/fields.js","..\\./node_modules/svelte-formgrid/src/FormField.html","..\\./node_modules/svelte-formgrid/src/FormCol.html","..\\./node_modules/svelte-formgrid/src/FormGrid.html","..\\./node_modules/svelte-formgrid/src/DataCol.html","..\\./node_modules/svelte-formgrid/src/DataGrid.html"],"names":["intialData","type","placeholder","label","inputClass","value","text","class","readOnly","required","pattern","validate","uniqueId","submit","error","field_base","data","Object","assign","fieldData","settings","[object Object]","p","uuid","get","element","refs","input","onkeyup","e","checkValidity","validationMessage","set","setError","setAttribute","s","t","n","k","undefined","makeUniqueId","replace","c","r","Math","random","toString","message","initialData","fieldtype","ctx","create_if_block","component","maxlength","this","target","handleCurrentValue","charset","validExample","isCharsetPresent","l","length","i","j","isInt","isLetter","strippedValue","matchesNumber","matchesLetter","newValue","isNaN","parseInt","match","indexOf","validateProgress","testValue","regex","RegExp","props","toUpperCase","substr","test","changed","current","handleChange","event","fire","oncreate","formatCurrency","alwaysShowCents","options","style","currency","minimumFractionDigits","maximumFractionDigits","Number","toLocaleString","CurrencyInput_data","v","toNumber","previous","blur","optionList","SelectInput_create_if_block","option_value_value","opt","getOptionName","optionValue","x","name","mergeState","mergeProps","ft","inputs_TextInput","toLowerCase","inputs_CurrencyInput","inputs_MaskedInput","inputs_NumberInput","inputs_SelectInput","field","source","childState","edit","FormCol_create_if_block","displayable","FormCol_create_if_block_1","classes","col","cols","split","filter","trim","map","join","hasOwnProperty","row","FormGrid_create_if_block","columns","subtitle","item","rows","maxRowNum","max","apply","o","push","forEach","collect","obj","action","DataCol_create_if_block","inputs_CheckboxInput","inputs_ActionButton","preventDefault","column","width","actionClick","numeric","truncate","src_Field","super"],"mappings":"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","file":"0.js","sourcesContent":["const intialData = { \r\n    type: 'text',\r\n    placeholder: '',\r\n    label: '',\r\n    inputClass: '',\r\n    value: '',\r\n    text: '',\r\n    class: '',\r\n    readOnly: false,\r\n    required: false,\r\n    pattern: '',\r\n    validate: null,\r\n    uniqueId: false,\r\n    submit: false,\r\n    error: '',\r\n};\r\n\r\nexport default {\r\n    data() {\r\n        return Object.assign({}, intialData);\r\n    },\r\n    fieldData(data) {\r\n        // console.log('field-base', data);\r\n        return Object.assign({}, { settings: null }, intialData, data);\r\n    },\r\n    oncreate(p) {\r\n        const { uuid, settings, type } = p.get();\r\n        const element = p.refs.input;\r\n        element.onkeyup = (e) => {\r\n            if (p.get().submit) {\r\n                const error = element.checkValidity() ? '' : element.validationMessage;\r\n                p.set({error});\r\n            }\r\n        };\r\n        element.setError = (error) => {\r\n            p.set({error, submit: true});\r\n        };\r\n        if (uuid) {\r\n            element.setAttribute('id', uuid);\r\n        }\r\n        p.set({ element });        \r\n    },\r\n    validate(p) { \r\n        const { element } = p.get();       \r\n        if (element.checkValidity) {\r\n            element.setError(element.validationMessage);\r\n        }\r\n        return element.checkValidity();\r\n    },\r\n    mergeProps(p, s) {\r\n        const t = p.get(), n = {};   \r\n        for (let k in s) {\r\n            if (t[k] !== undefined) {\r\n                n[k] = s[k];\r\n            }\r\n        }                            \r\n        p.set(n);\r\n    },\r\n    makeUniqueId() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n}","<div class=\"form-group row\">\r\n    <label class=\"col-4 col-form-label\" for={uuid}>{label}</label>\r\n    <div class=\"col-8\">\r\n        <div class=\"form-group\">\r\n            <svelte:component this=\"{fieldtype}\" {...settings} bind:value bind:submit bind:error {uuid} />\r\n            {#if submit && error}\r\n            <div class=\"invalid-feedback\">\r\n                {message}\r\n            </div>\r\n            {/if}\r\n        </div>       \r\n    </div>\r\n</div>\r\n\r\n<script>\r\n    import fieldBase from './inputs/field-base';\r\n\r\n    export default {\r\n        data() {\r\n            const initialData = { \r\n                uuid: fieldBase.makeUniqueId(),\r\n                submit: false,\r\n                error: '',\r\n                settings: null,\r\n                fieldtype: null,\r\n                value: '',\r\n            }\r\n            return Object.assign({}, initialData, fieldBase.fieldData());\r\n        },\r\n\r\n        computed:{\r\n            settings: (all) => { \r\n\t\t\t\treturn all.settings;\r\n\t\t\t},\r\n            message: ({ submit, error }) => {\r\n                return submit ? error : '';\r\n            },\r\n            label: ({ settings }) => { \r\n                return settings ? settings.label : null;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .invalid-feedback {\r\n        display: block;\r\n    }\r\n</style>","<input type=\"text\"\r\n    ref:input \r\n    class=\"form-control masked {inputClass}\" \r\n    bind:value=\"text\"\r\n    readonly=\"{readOnly}\"\r\n    {required} \r\n    {pattern}\r\n    {placeholder}               \r\n    on:input=\"handleChange(event)\" \r\n    on:change=\"fire('change', event)\"       \r\n    />\r\n\r\n<script>\r\n    import fieldBase from './field-base';\r\n    \r\n    export default {\r\n        data: fieldBase.data,\r\n        oncreate() {\r\n            fieldBase.oncreate(this);\r\n        },\r\n        onstate({ changed, current }) {\r\n            if (changed.value) {\r\n                this.set({ text: current.value });\r\n            }\r\n        },\r\n        methods: {\r\n            handleChange(e) {\r\n                const { maxlength, pattern, placeholder, text } = this.get();\r\n                e.target.value = this.handleCurrentValue(e);\r\n                // document.getElementById(uuid + 'Mask').innerHTML = this.setValueOfMask(e);\r\n                this.set({ value: e.target.value });\r\n            },\r\n\r\n            handleCurrentValue(e) {\r\n                const { charset, validExample } = this.get();\r\n                const isCharsetPresent = charset,\r\n                    maskedNumber = 'XMDY',\r\n                    maskedLetter = '_',\r\n                    placeholder = isCharsetPresent || this.get().placeholder,\r\n                    value = e.target.value, l = placeholder.length;\r\n                let i, j, isInt, isLetter, strippedValue, matchesNumber, matchesLetter, newValue = '';\r\n\r\n                // strip special characters\r\n                strippedValue = isCharsetPresent ? value.replace(/\\W/g, \"\") : value.replace(/\\D/g, \"\");\r\n\r\n                for (i = 0, j = 0; i < l; i++) {\r\n                    isInt = !isNaN(parseInt(strippedValue[j]));\r\n                    isLetter = strippedValue[j] ? strippedValue[j].match(/[A-Z]/i) : false;\r\n                    matchesNumber = (maskedNumber.indexOf(placeholder[i]) >= 0);\r\n                    matchesLetter = (maskedLetter.indexOf(placeholder[i]) >= 0);\r\n                    if ((matchesNumber && isInt) || (isCharsetPresent && matchesLetter && isLetter)) {\r\n                        newValue += strippedValue[j++];\r\n                    } else if ((!isCharsetPresent && !isInt && matchesNumber) || (isCharsetPresent && ((matchesLetter && !isLetter) || (matchesNumber && !isInt)))) {\r\n                        return newValue;\r\n                    } else {\r\n                        newValue += placeholder[i];\r\n                    }\r\n                    // break if no characters left and the pattern is non-special character\r\n                    if (strippedValue[j] == undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (validExample) {\r\n                    return this.validateProgress(e, newValue);\r\n                }                \r\n                return newValue;\r\n            },\r\n\r\n            validateProgress(e, value) {\r\n                const { pattern, placeholder, validExample } = this.get();\r\n                let l = value.length, testValue = '', i;\r\n                const regex = new RegExp(this.props.pattern);\r\n\r\n                //convert to months\r\n                if ((l == 1) && (placeholder.toUpperCase().substr(0, 2) == 'MM')) {\r\n                    if(value > 1 && value < 10) {\r\n                        value = '0' + value;\r\n                    }\r\n                    return value;\r\n                }\r\n\r\n                for ( i = l; i >= 0; i--) {\r\n                    testValue = value + validExample.substr(value.length);\r\n                    if (regex.test(testValue)) {\r\n                        return value;\r\n                    } else {\r\n                        value = value.substr(0, value.length-1);\r\n                    }\r\n                }\r\n\r\n                return value;\r\n            },\r\n        }    \r\n    }\r\n</script>","export function makeUniqueId() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\nexport function mergeProps(component, name) {\r\n    const s = component.get(name);\r\n    if (s) {\r\n        const t = component.get(), n = {};   \r\n        for (let k in s) {\r\n            if (t[k] !== undefined) {\r\n                n[k] = s[k];\r\n            }\r\n        }                            \r\n        component.set(n);\r\n    }\r\n}\r\n\r\nexport function formatCurrency(data, alwaysShowCents = true) {\r\n    var options = {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n    };\r\n  \r\n    if (!alwaysShowCents) {\r\n        options.minimumFractionDigits = 0;\r\n        options.maximumFractionDigits = 0;\r\n    }\r\n  \r\n    return Number(data).toLocaleString('en-US', options);\r\n}\r\n\r\nexport function debounce(func, wait, immediate) {\r\n    let timeout;\r\n    return function(...args) {\r\n        clearTimeout(timeout);\r\n        return new Promise((resolve) => {\r\n            timeout = setTimeout(() => {\r\n                timeout = null;\r\n                if (!immediate) resolve(func.apply(this, args));\r\n            }, wait)\r\n            if (immediate && !timeout) resolve(func.apply(this, [...args]));\r\n        });\r\n    }\r\n}","<input type=\"text\"\r\n    ref:input \r\n    class=\"form-control {inputClass}\" \r\n    id=\"{uuid}\" \r\n    placeholder=\"{placeholder}\"\r\n    pattern=\"^(?!\\(.*[^)]$|[^(].*\\)$)\\(?\\$?(0|[1-9]\\d&#123;0,2}(,?\\d&#123;3})?)(\\.\\d\\d?)?\\)?$\"\r\n    bind:value=\"text\"\r\n    readonly=\"{readOnly}\"\r\n    required=\"{required}\" \r\n    on:blur=\"blur(text)\"\r\n    on:change=\"fire('change', event)\"      \r\n    />\r\n\r\n<script>\r\n    import { formatCurrency } from '../utils'\r\n    import fieldBase from './field-base';\r\n\r\n    const toNumber = v => Number(v.replace(/[^0-9\\.]+/g,\"\"));\r\n\r\n    export default {\r\n        data: fieldBase.data,\r\n        onstate({ changed, current, previous }) {\r\n            fieldBase.oncreate(this, true);\r\n            if (changed.value) {\r\n                this.set({ text: formatCurrency(current.value) });\r\n            }\r\n        },\r\n        methods: {\r\n            blur(text) {\r\n                let value = text ? toNumber(text) : 0;\r\n                if (!isNaN(value)) {\r\n                    this.set({ text: formatCurrency(value) });\r\n                }\r\n                if (fieldBase.validate(this)) {                    \r\n                    this.set({ value });\r\n                }              \r\n            },\r\n        }\r\n    }\r\n</script>\r\n","<select class=\"form-control {inputClass}\" bind:value=\"value\" ref:input on:change=\"fire('change', event)\">\n    {#each optionList as opt}\n        {#if typeof optionList[0] === 'string'}\n        <option>{opt}</option>\n        {:else}\n        <option value={opt[optionValue]}>{getOptionName(opt)}</option>                    \n        {/if}\n    {/each}\n</select>\n\n<script>\n    import fieldBase from './field-base';\n\n    export default {\n        data() {\n            return { \n                uuid: '',\n                label: '',\n                inputClass: '',\n                value: '',\n                optionList: [],\n                getOptionName: (x) => x.name,\n                optionValue: 'id'\n            }\n        },\n        oncreate() {\n            fieldBase.oncreate(this);\n        },\n    }\n</script>","<input \n    type='text' \n    ref:input\n    class=\"form-control {inputClass}\"  \n    placeholder=\"{placeholder}\" \n    bind:value\n    readonly=\"{readOnly}\"\n    required=\"{required}\" \n    on:change=\"fire('change', event)\"    \n    />\n\n<script>\n    import fieldBase from './field-base';\n\n    export default {\n        data: fieldBase.data,\n        oncreate() {\n            fieldBase.oncreate(this);\n        },\n    }\n</script>","<input type='number' ref:input \n    class=\"form-control {inputClass}\" \n    placeholder=\"{placeholder}\" \n    bind:value\n    readonly=\"{readOnly}\" \n    required=\"{required}\" \n    on:change=\"fire('change', event)\" \n    />\n\n<script>\n    import fieldBase from './field-base';\n\n    export default {\n        data: fieldBase.data,\n        oncreate() {\n            fieldBase.oncreate(this);\n        },\n    }\n</script>","<input \r\n    type=\"checkbox\"\r\n    bind:checked=\"value\"\r\n    class=\"{class}\"\r\n    on:change=\"fire('change', event)\"\r\n/>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                label: '',\r\n                class: '',\r\n                value: false,\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n    input {\r\n        margin: 0 0 0 0.5rem;\r\n    }\r\n</style>","<button class=\"btn btn-{class}\" on:click=\"fire('click', event)\">{label}</button>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                label: '',\r\n                class: '',\r\n                value: false,\r\n            }\r\n        }\r\n    }\r\n</script>","import Field from './Field.html';\r\nimport { TextInput, NumberInput, MaskedInput, CurrencyInput, SelectInput } from './inputs';\r\n\r\nfunction mergeState(data, fieldtype) {\r\n\treturn Object.assign({}, data, { settings: data }, { fieldtype });\r\n}\r\n\r\nexport const TextField = class extends Field {\r\n    constructor(options) {\r\n\t\toptions.data = mergeState(options.data, TextInput);\r\n\t\tsuper(options);\r\n\t}    \r\n}\r\n\r\nexport const NumberField = class extends Field {\r\n    constructor(options) {\r\n\t\toptions.data = mergeState(options.data, NumberInput);\r\n\t\tsuper(options);\r\n\t}    \r\n}\r\n\r\nexport const MaskedField = class extends Field {\r\n    constructor(options) {\r\n\t\toptions.data = mergeState(options.data, MaskedInput);\r\n\t\tsuper(options);\r\n\t}    \r\n}\r\n\r\nexport const CurrencyField = class extends Field {\r\n    constructor(options) {\r\n\t\toptions.data = mergeState(options.data, CurrencyInput);\r\n\t\tsuper(options);\r\n\t}    \r\n}\r\n\r\nexport const SelectField = class extends Field {\r\n\tconstructor(options) {\r\n\t\toptions.data = mergeState(options.data, SelectInput);\r\n\t\tsuper(options);\r\n\t}    \r\n}","<!-- <Field {uuid} label=\"{fieldlabel}\" bind:submit bind:error >\r\n    <svelte:component this=\"{ fieldtype }\" {...settings} bind:value bind:submit bind:error {uuid} />\r\n</Field> -->\r\n<Field {settings} {fieldtype} bind:value />\r\n\r\n<script>\r\n    import {\r\n        TextInput,\r\n        SelectInput,\r\n        NumberInput,\r\n        CurrencyInput,\r\n        MaskedInput,\r\n    } from './inputs';\r\n    import Field from './Field.html';\r\n    import fieldBase from './inputs/field-base';\r\n\r\n    export default {\r\n        components: {\r\n            Field,\r\n        },\r\n        data() {\r\n            return { \r\n                uuid: fieldBase.makeUniqueId(),\r\n                // submit: false,\r\n                // error: '',\r\n                value: '',\r\n                settings: null\r\n            }\r\n        },\r\n        oncreate() {\r\n            fieldBase.mergeProps(this, this.get().settings);\r\n        },\r\n        computed: {\r\n            fieldlabel: ({ settings }) => {\r\n                return settings ? settings.label : '';\r\n            },\r\n            fieldtype: ({ settings }) => {\r\n                let ft = TextInput;\r\n                if (settings.component) {\r\n                    switch (settings.component.toLowerCase()) {\r\n                        case 'currency':\r\n                            ft = CurrencyInput;\r\n                            break;\r\n                        case 'masked':\r\n                            ft = MaskedInput;\r\n                            break;\r\n                        case 'number':\r\n                            ft = NumberInput;\r\n                            break;\r\n                        case 'select':\r\n                            ft = SelectInput;\r\n                            break;\r\n                    }\r\n                }\r\n                return ft;\r\n            }\r\n        }\r\n    }\r\n</script>","<div class={classes}>\r\n    {#if edit}\r\n        <FormField bind:value=\"source[field]\" {settings}/>\r\n    {:elseif displayable}\r\n        { source[field] }\r\n    {/if}\r\n</div>\r\n<script>\r\n    import FormField from './FormField.html';\r\n\r\n    export default {\r\n        components: {\r\n            FormField\r\n        },\r\n        data(){\r\n            return {\r\n                source: {},\r\n                settings: {}\r\n            }\r\n        },\r\n        computed:{\r\n            classes: ({ settings }) => {                \r\n                if (settings.col) {\r\n                    let cols = settings.col.split(' ');\r\n                    cols = cols.filter(x => x && x.trim()).map(x=> 'col-' + x);\r\n                    return cols.join(' ').trim();\r\n                }\r\n                return '';\r\n            },\r\n            displayable: ({ source, settings }) => {\r\n                return source && (source.hasOwnProperty(settings.field) && source[settings.field] != null);\r\n            },\r\n            field: ({ settings }) => {              \r\n                return settings.field;\r\n            },\r\n        }\r\n    }\r\n</script>\r\n    \r\n    ","<form class=\"form-horizontal\" ref:form>\r\n{#each rows as row}\r\n    {#if row.subtitle}\r\n    <div class=\"row subtitle\">{row.subtitle}</div>\r\n    {/if}\r\n    <div class=\"row {class}\">\r\n        {#each row.columns as col}\r\n        <FormCol settings=\"{col}\" bind:source {edit} />\r\n        {/each}\r\n    </div>\r\n{/each}\r\n</form>\r\n\r\n<script>\r\nimport FormCol from './FormCol.html';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            class: '',\r\n            edit: true,\r\n            item: {},\r\n            columns: [],\r\n        }\r\n    },\r\n    components:{\r\n        FormCol\r\n    },\r\n    computed:{\r\n        source: ({ item }) => {\r\n            return item;\r\n        },\r\n        rows: ({ columns }) => {                \r\n            const maxRowNum = Math.max.apply(Math, columns.map(o => o.row))\r\n            const rows = [];\r\n            for (let i = 0; i <= maxRowNum; i++) {\r\n                rows.push({ columns: [] });\r\n            }\r\n            columns.forEach(col => {\r\n                const row = rows[col.row];\r\n                if (row && row.columns) {\r\n                    row.columns.push(col);\r\n                    if (col.subtitle) {\r\n                        row.subtitle = col.subtitle;\r\n                    }\r\n                }                \r\n            });\r\n            // console.log('computed - rows', rows);\r\n            return rows;\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\n    .subtitle {\r\n        margin: 0.5rem;\r\n        font-size: 1rem;\r\n        font-weight: 600;\r\n        text-decoration: underline;\r\n        text-transform: uppercase;\r\n    }\r\n</style>","{#if edit || settings.action}\r\n    <svelte:component this=\"{ fieldtype }\" {...settings} bind:value=\"source[settings.field]\" on:change on:click />\r\n{:else}\r\n    { collect(source, settings.field) }\r\n{/if}\r\n\r\n<script>\r\n    import { TextInput, NumberInput, SelectInput, CurrencyInput, MaskedInput, CheckboxInput, ActionButton } from './inputs';\r\n\r\n    function collect(obj, field) {\r\n        if (typeof(field) === 'function')\r\n            return field(obj);\r\n        else if (typeof(field) === 'string')\r\n            return obj[field];\r\n        else\r\n            return undefined;\r\n    }\r\n\r\n    export default {\r\n        data(){\r\n            return {\r\n                source: {},\r\n            }\r\n        },\r\n        helpers: {\r\n            collect\r\n        },\r\n        computed:{\r\n            settings: (all) => { \r\n\t\t\t\treturn all.settings;\r\n\t\t\t},\r\n            fieldtype: ({ settings }) => {\r\n                let ft = TextInput;\r\n                if (settings.component) {\r\n                    switch (settings.component.toLowerCase()) {\r\n                        case 'text':\r\n                            ft = TextInput;\r\n                            break;\r\n                        case 'number':\r\n                            ft = NumberInput;\r\n                            break;    \r\n                        case 'masked':\r\n                            ft = MaskedInput;\r\n                            break;\r\n                        case 'currency':\r\n                            ft = CurrencyInput;\r\n                            break;\r\n                        case 'select':\r\n                            ft = SelectInput;\r\n                            break;\r\n                        case 'checkbox':\r\n                            ft = CheckboxInput;\r\n                            break;\r\n                        case 'action':\r\n                            ft = ActionButton;\r\n                            break;\r\n                    }\r\n                }\r\n                return ft;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n    ","<div style=\"position: relative\">\r\n    <table ref=\"table\" class=\"table table-striped table-sm {edit ? 'table-bordered' : ''}\">\r\n        <thead>\r\n            <tr>\r\n                {#each columns as column, x}\r\n                <th style=\"width: { column.width ? column.width : 'auto' }\">\r\n                    {column.label}\r\n                </th>\r\n                {/each}\r\n            </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n        {#each rows as row}\r\n            <tr>\r\n                {#each columns as column}\r\n                    <td class=\"{ ((!edit && column.action) || edit) ? 'nopadding' : '' } { column.numeric ? 'numeric' : ''} { column.truncate ? ' truncate' : '' }\" \r\n\t\t\t\t\t\t\tstyle=\"width: { column.width ? column.width : 'auto' }\">\r\n                        <DataCol bind:source=\"row\" settings=\"{column}\" {edit} on:change=\"fire('update', { event })\" on:click=\"actionClick(event, row, column.action)\" />\r\n                    </td>    \r\n                {/each}\r\n            </tr>\r\n        {/each}\r\n        </tbody>\r\n    </table>    \r\n</div>\r\n    \r\n<script>\r\n    import DataCol from './DataCol.html';\r\n    \r\n    export default {\r\n        data() {\r\n            return {\r\n                class: '',\r\n                columns: [],\r\n                edit: true,\r\n                rows: []\r\n            }\r\n        },\r\n        components:{\r\n            DataCol\r\n        },\r\n        computed: {\r\n            colCount: ({ columns }) => (columns) ? columns.length : 0,\r\n        },\r\n        methods: {\r\n            actionClick(event, row, action) {\r\n                event && event.preventDefault();\r\n                action && action(row);\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    td.nopadding {\r\n\t\tpadding: 0 0;\r\n\t}\r\n\ttd.nopadding :global(input) {\r\n\t\tpadding: 0.35rem 0.5rem;\r\n\t\tborder-width: 0;\r\n\t\t/* background-color: transparent; */\r\n\t}\r\n</style>"],"sourceRoot":""}